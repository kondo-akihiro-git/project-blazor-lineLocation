@page "/setting"
@using lineLocation.Data
@using lineLocation.Models;
@inject IMessageService _message

<PageTitle>Setting</PageTitle>
<br />
<h1>Setting</h1>

<Divider>Current Info</Divider>

<label class="label" for="name">Mail Address</label>
<Input Placeholder="test@gmail.com" type="email" max="50" AllowClear="true" OnChange="onChange" TValue="string" @bind-Value="currentMailaddress" />
<br>
<br>

<label class="label" for="e-mail">Password</label>
<Input Placeholder="passoword" type="password" max="50" AllowClear="true" OnChange="onChange" TValue="string" @bind-Value="currentPassword" />
<br>
<br>

<Collapse OnChange="Callback">
    <Panel Header="Do you want to delete ? ">
		if you click here,&nbsp;&nbsp;
		<Popconfirm Title="Are you sure ?"
					OnConfirm="Confirm"
					OnCancel="Cancel">					
			<Button Danger Block>DELETE</Button>
		</Popconfirm>
		&nbsp;&nbsp;your data will be erased.
    </Panel>
</Collapse>

<Divider>New Info</Divider>

<label class="label" for="name">New Address </label>
<Input Placeholder="test@gmail.com" type="email" max="50" AllowClear="true" OnChange="onChange" TValue="string" @bind-Value="newMailaddress" />
<br>
<br>

<label class="label" for="e-mail">New Password </label>
<Input Placeholder="password" type="password" max="50" AllowClear="true" OnChange="onChange" TValue="string" @bind-Value="newPassword" />
<br>
<br>

<Divider></Divider>

<div id="button-block-demo">
	<Button Type="@ButtonType.Primary" @onclick="update" Block>UPDATE</Button>
	<style>
		#button-block-demo > * {
			margin-bottom: 12px;
			border-color: black;
			background-color: gray;
		}</style>
</div>
<br>
@if (_finishRegistered == true)
{
	<br>
	<Alert Type="@AlertType.Success"
		   Message="Success"
		   Description="Your data has been properly stored in the Database."
		   ShowIcon="true" />
}


@code {

	private string currentMailaddress { get; set; }

	private string currentPassword { get; set; }

	private string newMailaddress { get; set; }

	private string newPassword { get; set; }

	private bool _finishRegistered { get; set; }

	private void update()
	{
		if (currentMailaddress != null & currentPassword != null & newMailaddress != null & newPassword != null)
		{
			try
			{

				string userId = Select.SelectUserIdByAddressPassword(currentMailaddress, currentPassword);

				Update.UpdateLoginData(newMailaddress, newPassword, userId);

				_finishRegistered = true;

			}
			catch
			{
				_finishRegistered = false;
				_message.Error("No updated.");
			}
		}
		else
		{
			_message.Error("No updated.");
		}
	}

	private void onChange(string value)
	{
		Console.WriteLine("onChange =>" + value);
	}
	void Callback(string[] keys)
	{
		Console.WriteLine(string.Join(',', keys));
	}
	private void Confirm()
	{
		if (currentMailaddress != null || currentPassword != null)
		{
			try
			{
				bool exist = Select.FlagSelectLogintable(currentMailaddress, currentPassword);
				if (exist == true)
				{
					Delete.DeleteAllData(currentMailaddress, currentPassword);
					_message.Success("Your data deleted.");
				}
				else
				{
					_message.Success("No data exists.");
				}
			}catch
			{
				_message.Error("No deleted.");
			}

		}
		else
		{
			_message.Error("No deleted.");
		}
	}

	private void Cancel()
	{
		_message.Error("Canseled.");		
	}
}

